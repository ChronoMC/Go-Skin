// Code generated by ent, DO NOT EDIT.

package texture

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/xmdhs/authlib-skin/db/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Texture {
	return predicate.Texture(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Texture {
	return predicate.Texture(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Texture {
	return predicate.Texture(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Texture {
	return predicate.Texture(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Texture {
	return predicate.Texture(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Texture {
	return predicate.Texture(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Texture {
	return predicate.Texture(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Texture {
	return predicate.Texture(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Texture {
	return predicate.Texture(sql.FieldLTE(FieldID, id))
}

// TextureHash applies equality check predicate on the "texture_hash" field. It's identical to TextureHashEQ.
func TextureHash(v string) predicate.Texture {
	return predicate.Texture(sql.FieldEQ(FieldTextureHash, v))
}

// TextureHashEQ applies the EQ predicate on the "texture_hash" field.
func TextureHashEQ(v string) predicate.Texture {
	return predicate.Texture(sql.FieldEQ(FieldTextureHash, v))
}

// TextureHashNEQ applies the NEQ predicate on the "texture_hash" field.
func TextureHashNEQ(v string) predicate.Texture {
	return predicate.Texture(sql.FieldNEQ(FieldTextureHash, v))
}

// TextureHashIn applies the In predicate on the "texture_hash" field.
func TextureHashIn(vs ...string) predicate.Texture {
	return predicate.Texture(sql.FieldIn(FieldTextureHash, vs...))
}

// TextureHashNotIn applies the NotIn predicate on the "texture_hash" field.
func TextureHashNotIn(vs ...string) predicate.Texture {
	return predicate.Texture(sql.FieldNotIn(FieldTextureHash, vs...))
}

// TextureHashGT applies the GT predicate on the "texture_hash" field.
func TextureHashGT(v string) predicate.Texture {
	return predicate.Texture(sql.FieldGT(FieldTextureHash, v))
}

// TextureHashGTE applies the GTE predicate on the "texture_hash" field.
func TextureHashGTE(v string) predicate.Texture {
	return predicate.Texture(sql.FieldGTE(FieldTextureHash, v))
}

// TextureHashLT applies the LT predicate on the "texture_hash" field.
func TextureHashLT(v string) predicate.Texture {
	return predicate.Texture(sql.FieldLT(FieldTextureHash, v))
}

// TextureHashLTE applies the LTE predicate on the "texture_hash" field.
func TextureHashLTE(v string) predicate.Texture {
	return predicate.Texture(sql.FieldLTE(FieldTextureHash, v))
}

// TextureHashContains applies the Contains predicate on the "texture_hash" field.
func TextureHashContains(v string) predicate.Texture {
	return predicate.Texture(sql.FieldContains(FieldTextureHash, v))
}

// TextureHashHasPrefix applies the HasPrefix predicate on the "texture_hash" field.
func TextureHashHasPrefix(v string) predicate.Texture {
	return predicate.Texture(sql.FieldHasPrefix(FieldTextureHash, v))
}

// TextureHashHasSuffix applies the HasSuffix predicate on the "texture_hash" field.
func TextureHashHasSuffix(v string) predicate.Texture {
	return predicate.Texture(sql.FieldHasSuffix(FieldTextureHash, v))
}

// TextureHashEqualFold applies the EqualFold predicate on the "texture_hash" field.
func TextureHashEqualFold(v string) predicate.Texture {
	return predicate.Texture(sql.FieldEqualFold(FieldTextureHash, v))
}

// TextureHashContainsFold applies the ContainsFold predicate on the "texture_hash" field.
func TextureHashContainsFold(v string) predicate.Texture {
	return predicate.Texture(sql.FieldContainsFold(FieldTextureHash, v))
}

// HasCreatedUser applies the HasEdge predicate on the "created_user" edge.
func HasCreatedUser() predicate.Texture {
	return predicate.Texture(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, CreatedUserTable, CreatedUserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCreatedUserWith applies the HasEdge predicate on the "created_user" edge with a given conditions (other predicates).
func HasCreatedUserWith(preds ...predicate.User) predicate.Texture {
	return predicate.Texture(func(s *sql.Selector) {
		step := newCreatedUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasUserProfile applies the HasEdge predicate on the "user_profile" edge.
func HasUserProfile() predicate.Texture {
	return predicate.Texture(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, UserProfileTable, UserProfilePrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserProfileWith applies the HasEdge predicate on the "user_profile" edge with a given conditions (other predicates).
func HasUserProfileWith(preds ...predicate.UserProfile) predicate.Texture {
	return predicate.Texture(func(s *sql.Selector) {
		step := newUserProfileStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasUsertexture applies the HasEdge predicate on the "usertexture" edge.
func HasUsertexture() predicate.Texture {
	return predicate.Texture(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, UsertextureTable, UsertextureColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUsertextureWith applies the HasEdge predicate on the "usertexture" edge with a given conditions (other predicates).
func HasUsertextureWith(preds ...predicate.UserTexture) predicate.Texture {
	return predicate.Texture(func(s *sql.Selector) {
		step := newUsertextureStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Texture) predicate.Texture {
	return predicate.Texture(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Texture) predicate.Texture {
	return predicate.Texture(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Texture) predicate.Texture {
	return predicate.Texture(func(s *sql.Selector) {
		p(s.Not())
	})
}
