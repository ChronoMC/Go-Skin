// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/xmdhs/authlib-skin/db/ent/predicate"
	"github.com/xmdhs/authlib-skin/db/ent/user"
	"github.com/xmdhs/authlib-skin/db/ent/usertoken"
)

// UserTokenUpdate is the builder for updating UserToken entities.
type UserTokenUpdate struct {
	config
	hooks    []Hook
	mutation *UserTokenMutation
}

// Where appends a list predicates to the UserTokenUpdate builder.
func (utu *UserTokenUpdate) Where(ps ...predicate.UserToken) *UserTokenUpdate {
	utu.mutation.Where(ps...)
	return utu
}

// SetTokenID sets the "token_id" field.
func (utu *UserTokenUpdate) SetTokenID(u uint64) *UserTokenUpdate {
	utu.mutation.ResetTokenID()
	utu.mutation.SetTokenID(u)
	return utu
}

// AddTokenID adds u to the "token_id" field.
func (utu *UserTokenUpdate) AddTokenID(u int64) *UserTokenUpdate {
	utu.mutation.AddTokenID(u)
	return utu
}

// SetUserID sets the "user" edge to the User entity by ID.
func (utu *UserTokenUpdate) SetUserID(id int) *UserTokenUpdate {
	utu.mutation.SetUserID(id)
	return utu
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (utu *UserTokenUpdate) SetNillableUserID(id *int) *UserTokenUpdate {
	if id != nil {
		utu = utu.SetUserID(*id)
	}
	return utu
}

// SetUser sets the "user" edge to the User entity.
func (utu *UserTokenUpdate) SetUser(u *User) *UserTokenUpdate {
	return utu.SetUserID(u.ID)
}

// Mutation returns the UserTokenMutation object of the builder.
func (utu *UserTokenUpdate) Mutation() *UserTokenMutation {
	return utu.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (utu *UserTokenUpdate) ClearUser() *UserTokenUpdate {
	utu.mutation.ClearUser()
	return utu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (utu *UserTokenUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, utu.sqlSave, utu.mutation, utu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (utu *UserTokenUpdate) SaveX(ctx context.Context) int {
	affected, err := utu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (utu *UserTokenUpdate) Exec(ctx context.Context) error {
	_, err := utu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (utu *UserTokenUpdate) ExecX(ctx context.Context) {
	if err := utu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (utu *UserTokenUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(usertoken.Table, usertoken.Columns, sqlgraph.NewFieldSpec(usertoken.FieldID, field.TypeInt))
	if ps := utu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := utu.mutation.TokenID(); ok {
		_spec.SetField(usertoken.FieldTokenID, field.TypeUint64, value)
	}
	if value, ok := utu.mutation.AddedTokenID(); ok {
		_spec.AddField(usertoken.FieldTokenID, field.TypeUint64, value)
	}
	if utu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   usertoken.UserTable,
			Columns: []string{usertoken.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := utu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   usertoken.UserTable,
			Columns: []string{usertoken.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, utu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{usertoken.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	utu.mutation.done = true
	return n, nil
}

// UserTokenUpdateOne is the builder for updating a single UserToken entity.
type UserTokenUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserTokenMutation
}

// SetTokenID sets the "token_id" field.
func (utuo *UserTokenUpdateOne) SetTokenID(u uint64) *UserTokenUpdateOne {
	utuo.mutation.ResetTokenID()
	utuo.mutation.SetTokenID(u)
	return utuo
}

// AddTokenID adds u to the "token_id" field.
func (utuo *UserTokenUpdateOne) AddTokenID(u int64) *UserTokenUpdateOne {
	utuo.mutation.AddTokenID(u)
	return utuo
}

// SetUserID sets the "user" edge to the User entity by ID.
func (utuo *UserTokenUpdateOne) SetUserID(id int) *UserTokenUpdateOne {
	utuo.mutation.SetUserID(id)
	return utuo
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (utuo *UserTokenUpdateOne) SetNillableUserID(id *int) *UserTokenUpdateOne {
	if id != nil {
		utuo = utuo.SetUserID(*id)
	}
	return utuo
}

// SetUser sets the "user" edge to the User entity.
func (utuo *UserTokenUpdateOne) SetUser(u *User) *UserTokenUpdateOne {
	return utuo.SetUserID(u.ID)
}

// Mutation returns the UserTokenMutation object of the builder.
func (utuo *UserTokenUpdateOne) Mutation() *UserTokenMutation {
	return utuo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (utuo *UserTokenUpdateOne) ClearUser() *UserTokenUpdateOne {
	utuo.mutation.ClearUser()
	return utuo
}

// Where appends a list predicates to the UserTokenUpdate builder.
func (utuo *UserTokenUpdateOne) Where(ps ...predicate.UserToken) *UserTokenUpdateOne {
	utuo.mutation.Where(ps...)
	return utuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (utuo *UserTokenUpdateOne) Select(field string, fields ...string) *UserTokenUpdateOne {
	utuo.fields = append([]string{field}, fields...)
	return utuo
}

// Save executes the query and returns the updated UserToken entity.
func (utuo *UserTokenUpdateOne) Save(ctx context.Context) (*UserToken, error) {
	return withHooks(ctx, utuo.sqlSave, utuo.mutation, utuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (utuo *UserTokenUpdateOne) SaveX(ctx context.Context) *UserToken {
	node, err := utuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (utuo *UserTokenUpdateOne) Exec(ctx context.Context) error {
	_, err := utuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (utuo *UserTokenUpdateOne) ExecX(ctx context.Context) {
	if err := utuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (utuo *UserTokenUpdateOne) sqlSave(ctx context.Context) (_node *UserToken, err error) {
	_spec := sqlgraph.NewUpdateSpec(usertoken.Table, usertoken.Columns, sqlgraph.NewFieldSpec(usertoken.FieldID, field.TypeInt))
	id, ok := utuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "UserToken.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := utuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, usertoken.FieldID)
		for _, f := range fields {
			if !usertoken.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != usertoken.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := utuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := utuo.mutation.TokenID(); ok {
		_spec.SetField(usertoken.FieldTokenID, field.TypeUint64, value)
	}
	if value, ok := utuo.mutation.AddedTokenID(); ok {
		_spec.AddField(usertoken.FieldTokenID, field.TypeUint64, value)
	}
	if utuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   usertoken.UserTable,
			Columns: []string{usertoken.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := utuo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   usertoken.UserTable,
			Columns: []string{usertoken.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &UserToken{config: utuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, utuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{usertoken.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	utuo.mutation.done = true
	return _node, nil
}
