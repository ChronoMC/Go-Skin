// Code generated by ent, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// TexturesColumns holds the columns for the "textures" table.
	TexturesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "texture_hash", Type: field.TypeString, SchemaType: map[string]string{"mysql": "VARCHAR(100)"}},
		{Name: "type", Type: field.TypeString, SchemaType: map[string]string{"mysql": "VARCHAR(10)"}},
		{Name: "variant", Type: field.TypeString, SchemaType: map[string]string{"mysql": "VARCHAR(10)"}},
		{Name: "texture_created_user", Type: field.TypeInt},
		{Name: "user_profile_texture", Type: field.TypeInt},
	}
	// TexturesTable holds the schema information for the "textures" table.
	TexturesTable = &schema.Table{
		Name:       "textures",
		Columns:    TexturesColumns,
		PrimaryKey: []*schema.Column{TexturesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "textures_users_created_user",
				Columns:    []*schema.Column{TexturesColumns[4]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "textures_user_profiles_texture",
				Columns:    []*schema.Column{TexturesColumns[5]},
				RefColumns: []*schema.Column{UserProfilesColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "texture_user_profile_texture",
				Unique:  false,
				Columns: []*schema.Column{TexturesColumns[5]},
			},
		},
	}
	// UsersColumns holds the columns for the "users" table.
	UsersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "email", Type: field.TypeString, Unique: true, SchemaType: map[string]string{"mysql": "VARCHAR(30)"}},
		{Name: "password", Type: field.TypeString, SchemaType: map[string]string{"mysql": "VARCHAR(80)"}},
		{Name: "salt", Type: field.TypeString, SchemaType: map[string]string{"mysql": "VARCHAR(50)"}},
		{Name: "reg_ip", Type: field.TypeString, SchemaType: map[string]string{"mysql": "VARCHAR(32)"}},
		{Name: "state", Type: field.TypeInt},
		{Name: "reg_time", Type: field.TypeInt64},
	}
	// UsersTable holds the schema information for the "users" table.
	UsersTable = &schema.Table{
		Name:       "users",
		Columns:    UsersColumns,
		PrimaryKey: []*schema.Column{UsersColumns[0]},
		Indexes: []*schema.Index{
			{
				Name:    "user_email",
				Unique:  true,
				Columns: []*schema.Column{UsersColumns[1]},
			},
			{
				Name:    "user_reg_ip",
				Unique:  false,
				Columns: []*schema.Column{UsersColumns[4]},
			},
		},
	}
	// UserProfilesColumns holds the columns for the "user_profiles" table.
	UserProfilesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "name", Type: field.TypeString, Unique: true, SchemaType: map[string]string{"mysql": "VARCHAR(20)"}},
		{Name: "uuid", Type: field.TypeString, SchemaType: map[string]string{"mysql": "VARCHAR(32)"}},
		{Name: "user_profile", Type: field.TypeInt, Unique: true},
	}
	// UserProfilesTable holds the schema information for the "user_profiles" table.
	UserProfilesTable = &schema.Table{
		Name:       "user_profiles",
		Columns:    UserProfilesColumns,
		PrimaryKey: []*schema.Column{UserProfilesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "user_profiles_users_profile",
				Columns:    []*schema.Column{UserProfilesColumns[3]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "userprofile_user_profile",
				Unique:  false,
				Columns: []*schema.Column{UserProfilesColumns[3]},
			},
		},
	}
	// UserTokensColumns holds the columns for the "user_tokens" table.
	UserTokensColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "token_id", Type: field.TypeUint64},
		{Name: "user_token", Type: field.TypeInt, Unique: true, Nullable: true},
	}
	// UserTokensTable holds the schema information for the "user_tokens" table.
	UserTokensTable = &schema.Table{
		Name:       "user_tokens",
		Columns:    UserTokensColumns,
		PrimaryKey: []*schema.Column{UserTokensColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "user_tokens_users_token",
				Columns:    []*schema.Column{UserTokensColumns[2]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "usertoken_user_token",
				Unique:  false,
				Columns: []*schema.Column{UserTokensColumns[2]},
			},
		},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		TexturesTable,
		UsersTable,
		UserProfilesTable,
		UserTokensTable,
	}
)

func init() {
	TexturesTable.ForeignKeys[0].RefTable = UsersTable
	TexturesTable.ForeignKeys[1].RefTable = UserProfilesTable
	UserProfilesTable.ForeignKeys[0].RefTable = UsersTable
	UserTokensTable.ForeignKeys[0].RefTable = UsersTable
}
