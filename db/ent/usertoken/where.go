// Code generated by ent, DO NOT EDIT.

package usertoken

import (
	"entgo.io/ent/dialect/sql"
	"github.com/xmdhs/authlib-skin/db/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.UserToken {
	return predicate.UserToken(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.UserToken {
	return predicate.UserToken(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.UserToken {
	return predicate.UserToken(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.UserToken {
	return predicate.UserToken(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.UserToken {
	return predicate.UserToken(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.UserToken {
	return predicate.UserToken(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.UserToken {
	return predicate.UserToken(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.UserToken {
	return predicate.UserToken(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.UserToken {
	return predicate.UserToken(sql.FieldLTE(FieldID, id))
}

// TokenID applies equality check predicate on the "token_id" field. It's identical to TokenIDEQ.
func TokenID(v uint64) predicate.UserToken {
	return predicate.UserToken(sql.FieldEQ(FieldTokenID, v))
}

// UUID applies equality check predicate on the "uuid" field. It's identical to UUIDEQ.
func UUID(v string) predicate.UserToken {
	return predicate.UserToken(sql.FieldEQ(FieldUUID, v))
}

// TokenIDEQ applies the EQ predicate on the "token_id" field.
func TokenIDEQ(v uint64) predicate.UserToken {
	return predicate.UserToken(sql.FieldEQ(FieldTokenID, v))
}

// TokenIDNEQ applies the NEQ predicate on the "token_id" field.
func TokenIDNEQ(v uint64) predicate.UserToken {
	return predicate.UserToken(sql.FieldNEQ(FieldTokenID, v))
}

// TokenIDIn applies the In predicate on the "token_id" field.
func TokenIDIn(vs ...uint64) predicate.UserToken {
	return predicate.UserToken(sql.FieldIn(FieldTokenID, vs...))
}

// TokenIDNotIn applies the NotIn predicate on the "token_id" field.
func TokenIDNotIn(vs ...uint64) predicate.UserToken {
	return predicate.UserToken(sql.FieldNotIn(FieldTokenID, vs...))
}

// TokenIDGT applies the GT predicate on the "token_id" field.
func TokenIDGT(v uint64) predicate.UserToken {
	return predicate.UserToken(sql.FieldGT(FieldTokenID, v))
}

// TokenIDGTE applies the GTE predicate on the "token_id" field.
func TokenIDGTE(v uint64) predicate.UserToken {
	return predicate.UserToken(sql.FieldGTE(FieldTokenID, v))
}

// TokenIDLT applies the LT predicate on the "token_id" field.
func TokenIDLT(v uint64) predicate.UserToken {
	return predicate.UserToken(sql.FieldLT(FieldTokenID, v))
}

// TokenIDLTE applies the LTE predicate on the "token_id" field.
func TokenIDLTE(v uint64) predicate.UserToken {
	return predicate.UserToken(sql.FieldLTE(FieldTokenID, v))
}

// UUIDEQ applies the EQ predicate on the "uuid" field.
func UUIDEQ(v string) predicate.UserToken {
	return predicate.UserToken(sql.FieldEQ(FieldUUID, v))
}

// UUIDNEQ applies the NEQ predicate on the "uuid" field.
func UUIDNEQ(v string) predicate.UserToken {
	return predicate.UserToken(sql.FieldNEQ(FieldUUID, v))
}

// UUIDIn applies the In predicate on the "uuid" field.
func UUIDIn(vs ...string) predicate.UserToken {
	return predicate.UserToken(sql.FieldIn(FieldUUID, vs...))
}

// UUIDNotIn applies the NotIn predicate on the "uuid" field.
func UUIDNotIn(vs ...string) predicate.UserToken {
	return predicate.UserToken(sql.FieldNotIn(FieldUUID, vs...))
}

// UUIDGT applies the GT predicate on the "uuid" field.
func UUIDGT(v string) predicate.UserToken {
	return predicate.UserToken(sql.FieldGT(FieldUUID, v))
}

// UUIDGTE applies the GTE predicate on the "uuid" field.
func UUIDGTE(v string) predicate.UserToken {
	return predicate.UserToken(sql.FieldGTE(FieldUUID, v))
}

// UUIDLT applies the LT predicate on the "uuid" field.
func UUIDLT(v string) predicate.UserToken {
	return predicate.UserToken(sql.FieldLT(FieldUUID, v))
}

// UUIDLTE applies the LTE predicate on the "uuid" field.
func UUIDLTE(v string) predicate.UserToken {
	return predicate.UserToken(sql.FieldLTE(FieldUUID, v))
}

// UUIDContains applies the Contains predicate on the "uuid" field.
func UUIDContains(v string) predicate.UserToken {
	return predicate.UserToken(sql.FieldContains(FieldUUID, v))
}

// UUIDHasPrefix applies the HasPrefix predicate on the "uuid" field.
func UUIDHasPrefix(v string) predicate.UserToken {
	return predicate.UserToken(sql.FieldHasPrefix(FieldUUID, v))
}

// UUIDHasSuffix applies the HasSuffix predicate on the "uuid" field.
func UUIDHasSuffix(v string) predicate.UserToken {
	return predicate.UserToken(sql.FieldHasSuffix(FieldUUID, v))
}

// UUIDEqualFold applies the EqualFold predicate on the "uuid" field.
func UUIDEqualFold(v string) predicate.UserToken {
	return predicate.UserToken(sql.FieldEqualFold(FieldUUID, v))
}

// UUIDContainsFold applies the ContainsFold predicate on the "uuid" field.
func UUIDContainsFold(v string) predicate.UserToken {
	return predicate.UserToken(sql.FieldContainsFold(FieldUUID, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.UserToken) predicate.UserToken {
	return predicate.UserToken(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.UserToken) predicate.UserToken {
	return predicate.UserToken(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.UserToken) predicate.UserToken {
	return predicate.UserToken(func(s *sql.Selector) {
		p(s.Not())
	})
}
